from django import forms
from articles.models import Discipline
from settings import EDUCATION_LEVEL_CHOICES
from articles.models import Article
from django.forms import ModelForm
from userprofiles.forms import ExtendedMetaModelForm

'''
Definitions for the forms used when uploading or editing articles on CivilPress.org. 
'''

# Used to change the error messages for fields in EditFileForm and UploadFileForm. 
article_field_args = { "file_field" : {"error_messages" : {"required" : "File: Please choose a file to upload to CivilPress.org"}},
            	     "title" : { "error_messages" : {"required" : "Title: Please give your submission a title.", 'unique' : "You have already submitted an article with this title. Please choose another title."}},
			"word_limit" : {"error_messages" : {"invalid" : "Word limit: Please enter a whole number."}},
                     }

# Inherits from ExtendedMetaModelForm so that the field_args variable in the Meta class can be used to change the
# error messages associated with each field in the Article model (otherwise, these fields need to be entirely overriden
# if an error message needs to be changed).  
class UploadFileModelForm(ExtendedMetaModelForm): 
    def __init__(self, *args, **kwargs):
	super(UploadFileModelForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor.
	self.fields['anonymous'].widget.attrs.update
	try:
		self.fields['file_field'].widget.attrs.update({'accept' : 'application/msword,application/vnd.oasis.opendocument.text,application/vnd.openxmlformats-officedocument.wordprocessingml.document'})
	except:
		print "Exception in articles/upload_form.py: Attempted to add 'accept' attribute to 'file_field', however 'file_field' does not exist. Most likely because we are using EditFileForm (which inherits this __init__) which does not have a 'file_field'." 
    class Meta:
        model = Article
	# These custom error fields are added using the ExtendedMetaModelForm.
	field_args = article_field_args

# Extends the class above and adds the tags and discipline fields. Can override any of the fields included in ModelForm above. Unfortunately, extending the ModelForm like
# this is the only way to customise the form fields for individual model fields while still being able to use the other fields automatically generated by ModelForm.              
class UploadFileForm(UploadFileModelForm):
    tags = forms.CharField(max_length = 1000, required=False)
    discipline = forms.ModelChoiceField(queryset=Discipline.objects.all(), required=False)

# Couldn't just reuse the UploadFileForm class for EditFileForm as exclusion of 'file_field' is necessary, therefore the Meta class needed to be changed (and I am not really sure how to do
# this any other way). NOTE: Fix this in future to uphold the DRY principle.  
class EditFileForm(UploadFileForm): 
    class Meta:
	model = Article
	exclude = ('file_field',)
	field_args = article_field_args



